plugins {
    id 'com.sarhanm.versioner' version '4.0.2'
    id 'com.gradle.plugin-publish' version '0.14.0'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'io.github.gradle-nexus.publish-plugin'  version '1.1.0'
    id 'signing'

}

group = 'com.sarhanm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'maven-publish'

versioner{
    //Community Plugins are required to have a clean version string.
    omitBranchMetadataOnSolidBranch=true
}

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()


    compile 'org.yaml:snakeyaml:1.28'
    compile 'io.github.http-builder-ng:http-builder-ng-apache:1.0.4'

    testCompile gradleTestKit()
    testCompile ('org.spockframework:spock-core:1.2-groovy-2.5'){
        exclude module : 'groovy-all'
    }

    testCompile 'com.netflix.nebula:nebula-test:7.2.3'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task groovydocJar( type: Jar ) {
    classifier 'javadoc'
    from groovydoc
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifact sourcesJar
            artifact groovydocJar
            pom { 
                name = 'Gradle Versioner'
                description = 'Auto versioning gradle builds via git metadata (tags, branch names) and # of commits'
                url = 'https://github.com/sarhanm/gradle-versioner'

                scm {
                    url = 'https://github.com/sarhanm/gradle-versioner'
                    connection = 'scm:git:git://github.com:sarhanm/gradle-versioner.git'
                    developerConnection = 'scm:git:ssh://github.com:sarhanm/gradle-versioner.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'sarhanm'
                        name = 'Mohammad Sarhan'
                        email = 'sarhanm@gmail.com'
                        organizationUrl = 'https://sarhanm.com'
                    }
                }
            }
        }
    }
}

pluginBundle {
  website = 'https://github.com/sarhanm/gradle-versioner/wiki'
  vcsUrl = 'https://github.com/sarhanm/gradle-versioner'
  description = 'Set the project version based on git tag metadata and number of commits.'
  tags = ['versioner', 'version', 'versioning', 'git', 'scm', 'commits', 'auto version', 'auto', 'gradle']

    plugins {

        versionerPlugin {
            id = 'com.sarhanm.versioner'
            displayName = 'Gradle Project Version Set Plugin'
            description = 'Set the project version based on git metatdata and number of commits. Example: 1.0.81.master.efbb95a'
        }

        versionResolverPlugin {
            id = 'com.sarhanm.version-resolver'
            displayName = 'Version Resolver: Resolve Dependencies From Global Manifest'
            description = 'Allows you to resolve versions for all dependencies from a global manifest rather than hard coding versions in each build.gradle file.'
        }
    }
}

/**
 * Grabs the values from the env and writes to a file that can be used by the plugin-publish plugin.
 * This allows us define the API and secrete securely in travis-ci
 */
task setupPluginUpload {
    doLast {
        def key = System.env.gradlePublishKey
        def secret = System.env.gradlePublishSecret

        if (!key || !secret) {
            throw new RuntimeException("gradlePublishKey and/or gradlePublishSecret are not defined environment variables")
        }

        System.properties.setProperty("gradle.publish.key", key)
        System.properties.setProperty("gradle.publish.secret", secret)
    }
}

tasks.publishPlugins.dependsOn tasks.setupPluginUpload

// To upload to nexus, you must supply the following environment variables
//      ORG_GRADLE_PROJECT_sonatypePassword
//      ORG_GRADLE_PROJECT_sonatypeUsername
nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }

    // We store the armored value as a base64 value to get
    // around all the escaping required by Travis-CI
    // if we were to use the private key directly.
    // Generated the armored value with command
    //  gpg --export-secret-keys --armor KEY_ID > private-ci.key
    // then base64 encoded the file and escaped the = and any + or / characters (required for travis-ci)
    // add that value in travic-ci with the following keys:
    //      ORG_GRADLE_PROJECT_signingKey
    //      ORG_GRADLE_PROJECT_signingPassword

    String signingKeyBase64 = findProperty("signingKey")
    def signingKey = signingKeyBase64 ? new String(signingKeyBase64.decodeBase64()) : null
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.pluginMaven
}